data <- load('rsa911_02to12.RData')
head(data)
head(data, n = 7)
head(rsa911, n = 7)
str(data)
str(rsa911)
head(rsa911$clsrtype)
rsa911$outcome <- (rsa911$clsrtype == 3)
str(rsa911)
library(caret)
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.25, list=FALSE)
str(sampleTestData)
sampleTrainingData <- rsa911[sampleTestData,]
dim(sampleTrainingData)
sampleTrainingData$outcome <- (sampleTrainingData$clsrtype == 3)
load('rsa911_02to12.RData')
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.10, list=FALSE)
rsa911$outcome <- (rsa911$clsrtype == 3)
sampleTrainingData <- rsa911[sampleTestData,]
sampleTrainingData$outcome <- (sampleTrainingData$clsrtype == 3)
sampleTrainingData$clsrtype <- NULL
dim(sampleTrainingData)
head(sampleTrainingData$outcome)
str(sampleTrainingData)
sampleTrainingDataSubsetColumns <- sampleTrainingData[,(sampleTrainingData$prevclsr, sampleTrainingData$gender, sampleTrainingData$white, sampleTrainingData$black, sampleTrainingData$aian, sampleTrainingData$asian, sampleTrainingData$nhpi, sampleTrainingData$appleduc, sampleTrainingData$majorimp, sampleTrainingData$applwork, sampleTrainingData$applearn, sampleTrainingData$applhour)]
sampleTrainingDataSubsetColumns <- sampleTrainingData[sampleTrainingData$prevclsr, sampleTrainingData$gender, sampleTrainingData$white, sampleTrainingData$black, sampleTrainingData$aian, sampleTrainingData$asian, sampleTrainingData$nhpi, sampleTrainingData$appleduc, sampleTrainingData$majorimp, sampleTrainingData$applwork, sampleTrainingData$applearn, sampleTrainingData$applhour]
sampleTrainingDataSubsetColumns <- sampleTrainingData[prevclsr, gender, white, black, aian, asian, nhpi, appleduc, majorimp, applwork, applearn, applhour]
sampleTrainingDataSubsetColumns <- sampleTrainingData[c("prevclsr", "gender", "white", "black", "aian", "asian", "nhpi", "appleduc", "majorimp", "applwork", "applearn", "applhour")]
sampleTrainingDataSubsetColumns <- sampleTrainingData[c("prevclsr", "gender", "white", "black", "aian", "asian", "nhpi", "appleduc", "majorimp", "applwork", "applearn", "applhour", "outcome")]
str(sampleTrainingDataSubsetColumns)
sampleTrainingDataSubsetColumns[,1:8] = as.factor(sampleTrainingDataSubsetColumns[,1:8])
a <- lapply(sampleTrainingDataSubsetColumns, as.factor)
str(a)
a <- lapply(sampleTrainingDataSubsetColumns[1:8], as.factor)
str(a)
a <- lapply(sampleTrainingDataSubsetColumns[1:10], as.factor)
str(a)
a$applearn <- sampleTrainingDataSubsetColumns$applearn
a$applhour <- sampleTrainingDataSubsetColumns$applhour
a$outcome <- sampleTrainingDataSubsetColumns$outcome
str(a)
factorCols <- c("prevclsr","gender","white","black","aian","asian","nhpi","appleduc","majorimp","applwork")
factorCols <- c("prevclsr","gender","white","black","aian","asian","nhpi","appleduc","majorimp","applwork")
b[,factorCols]<- data.frame(apply(sampleTrainingDataSubsetColumns[factorCols], 2, as.factor))
sampleTrainingDataSubsetColumns[,factorCols]<- data.frame(apply(sampleTrainingDataSubsetColumns[factorCols], 2, as.factor))
inTrain <- createDataPartition(y=sampleTrainingDataSubsetColumns$outcome, p=0.7, list=FALSE)
library("caret", lib.loc="~/R/win-library/3.0")
library(caret)
inTrain <- createDataPartition(y=sampleTrainingDataSubsetColumns$outcome, p=0.7, list=FALSE)
validTrainDataTrain <- sampleTrainingDataSubsetColumns[inTrain,]
validTrainDataTest <- sampleTrainingDataSubsetColumns[-inTrain,]
library(randomForest)
random.forest <- train(validTrainDataTrain[,-13],
validTrainDataTrain$outcome,
tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none")
)
str(validTrainDataTrain)
validTrainDataTrain[,-13]
random.forest <- train(validTrainDataTrain[,-13],
validTrainDataTrain$outcome,
tuneGrid=data.frame(mtry=3),
trControl=trainControl(method="none")
)
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf",prox=TRUE)
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rpart")
library("rattle", lib.loc="~/R/win-library/3.0")
source('~/.active-rstudio-document', echo=TRUE)
str(sampleTrainingDataSubsetColumns)
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf")
sampleTrainingDataSubsetColumns$outcome <- as.factor(sampleTrainingDataSubsetColumns$outcome)
str(sampleTrainingDataSubsetColumns)
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf")
library(caret)
library(randomForest)
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf")
modFit <- train(outcome~prevclsr+gender,data=sampleTrainingDataSubsetColumns,method="rf")
load('rsa911_02to12.RData')
head(rsa911, n = 7)
library(caret)
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.01, list=FALSE)
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.05, list=FALSE)
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.01, list=FALSE)
sampleTrainingData <- rsa911[sampleTestData,]
dim(sampleTrainingData)
sampleTrainingData$outcome <- (sampleTrainingData$clsrtype == 3)
sampleTrainingData$clsrtype <- NULL
head(sampleTrainingData$outcome)
sampleTrainingDataSubsetColumns <- sampleTrainingData[c("prevclsr", "gender", "white", "black", "aian", "asian", "nhpi", "appleduc", "majorimp", "applwork", "applearn", "applhour", "outcome")]
factorCols <- c("prevclsr","gender","white","black","aian","asian","nhpi","appleduc","majorimp","applwork")
sampleTrainingDataSubsetColumns[,factorCols]<- data.frame(apply(sampleTrainingDataSubsetColumns[factorCols], 2, as.factor))
sampleTrainingDataSubsetColumns$outcome <- as.factor(sampleTrainingDataSubsetColumns$outcome)
library(caret)
inTrain <- createDataPartition(y=sampleTrainingDataSubsetColumns$outcome, p=0.7, list=FALSE)
validTrainDataTrain <- sampleTrainingDataSubsetColumns[inTrain,]
validTrainDataTest <- sampleTrainingDataSubsetColumns[-inTrain,]
library(randomForest)
#validTrainDataTrain[,-13]
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf")
sampleTrainingDataSubsetColumns <- na.omit(sampleTrainingDataSubsetColumns)
library(caret)
inTrain <- createDataPartition(y=sampleTrainingDataSubsetColumns$outcome, p=0.7, list=FALSE)
validTrainDataTrain <- sampleTrainingDataSubsetColumns[inTrain,]
validTrainDataTest <- sampleTrainingDataSubsetColumns[-inTrain,]
library(randomForest)
#validTrainDataTrain[,-13]
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf")
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf",prox=TRUE)
warnings()
load('rsa911_02to12.RData')
head(rsa911, n = 7)
str(rsa911)
#rsa911$outcome <- (rsa911$clsrtype == 3)
library(caret)
sampleTestData <- createDataPartition(y=rsa911$clsrtype, p=0.001, list=FALSE)
sampleTrainingData <- rsa911[sampleTestData,]
dim(sampleTrainingData)
sampleTrainingData$outcome <- (sampleTrainingData$clsrtype == 3)
dim(sampleTrainingData)
sampleTrainingData$clsrtype <- NULL
head(sampleTrainingData$outcome)
str(sampleTrainingData)
sampleTrainingDataSubsetColumns <- sampleTrainingData[c("prevclsr", "gender", "white", "black", "aian", "asian", "nhpi", "appleduc", "majorimp", "applwork", "applearn", "applhour", "outcome")]
#sampleTrainingDataSubsetColumns[,1:8] = as.factor(sampleTrainingDataSubsetColumns[,1:8])
# a <- lapply(sampleTrainingDataSubsetColumns[1:10], as.factor)
# a$applearn <- sampleTrainingDataSubsetColumns$applearn
# a$applhour <- sampleTrainingDataSubsetColumns$applhour
# a$outcome <- sampleTrainingDataSubsetColumns$outcome
#
factorCols <- c("prevclsr","gender","white","black","aian","asian","nhpi","appleduc","majorimp","applwork")
sampleTrainingDataSubsetColumns[,factorCols]<- data.frame(apply(sampleTrainingDataSubsetColumns[factorCols], 2, as.factor))
str(sampleTrainingDataSubsetColumns)
sampleTrainingDataSubsetColumns$outcome <- as.factor(sampleTrainingDataSubsetColumns$outcome)
sampleTrainingDataSubsetColumns <- na.omit(sampleTrainingDataSubsetColumns)
library(caret)
inTrain <- createDataPartition(y=sampleTrainingDataSubsetColumns$outcome, p=0.7, list=FALSE)
validTrainDataTrain <- sampleTrainingDataSubsetColumns[inTrain,]
validTrainDataTest <- sampleTrainingDataSubsetColumns[-inTrain,]
library(randomForest)
#validTrainDataTrain[,-13]
modFit <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rf",prox=TRUE)
modFitRf <- train(outcome~ .,data=sampleTrainingDataSubsetColumns,method="rpart")
library(rattle)
fancyRpartPlot(modFitRf$finalModel)
library(rattle)
fancyRpartPlot(modFitRf$finalModel)
install.packages("rpart.plot")
library(rattle)
fancyRpartPlot(modFitRf$finalModel)
modFitRpart <- modFitRf
predict(modFitRpart,newdata=validTrainDataTest)
ans <- predict(modFitRpart,newdata=validTrainDataTest)
validTrainDataTest$outcome
validTrainDataTest$outcome =! ans
cbind(validTrainDataTest$outcome, ans)
validTrainDataTest$outcome
validTrainDataTest <- sampleTrainingDataSubsetColumns[-inTrain,]
predict(modFitRpart,newdata=validTrainDataTest)
ans <- predict(modFitRpart,newdata=validTrainDataTest)
ans1 <- validTrainDataTest$outcome
ans1
str(ans1)
str(ans)
ans - ans1
as.numeric(ans)
ansx <- as.numeric(ans)
ans1x <- as.numeric(ans1)
ansx - ans1x
diff <- (ansx - ans1x)
length(diff)
diff[diff!=0]
length(diff[diff!=0])
modFitRpart
597/1896
1-597/1896
validTrainDataTrain$outcome
str(validTrainDataTrain$outcome)
str(validTrainDataTrain$outcome == "TRUE"
)
length(validTrainDataTrain$outcome == "TRUE")
k <- validTrainDataTrain$outcome == "TRUE"
length(k[k==TRUE])
length(k[k==FALSE])
library("shiny", lib.loc="~/R/win-library/3.0")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
setwd("C:/Users/and/Documents/GitHub/courses/09_DevelopingDataProducts/shiny/graphApp")
shiny::runApp('~/GitHub/Badger')
getwd()
shiny::runApp()
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
?renderPlot
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
fancyRpartPlot(modFitRpart$finalModel)
plot(modFitRpart$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
plot(modFitRpart$finalModel, uniform=TRUE, main="Classification Tree")
shiny::runApp('~/GitHub/Badger')
fancyRpartPlot(modFitRpart$finalModel)
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
str(validTrainDataTest)
shiny::runApp('~/GitHub/Badger')
c(0:8)
unique(validTrainDataTest$majorimp)
unique(validTrainDataTest$appleduc)
unique(validTrainDataTest$applwork)
c(1 10 11 2 3 5 6 7 8 9)
?numericInput
max(validTrainDataTrain$applearn)
max(validTrainDataTrain$applwork)
max(validTrainDataTrain$applhour)
min(validTrainDataTrain$applhour)
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/courses/09_DevelopingDataProducts/shiny2/testApp2')
shiny::runApp('~/GitHub/Badger')
?predict
shiny::runApp('~/GitHub/Badger')
str(validTrainDataTest)
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
predict(modFitRpart,newdata=validTrainDataTest)
out <- predict(modFitRpart,newdata=validTrainDataTest)
out[0]
out[[0]
}
out[[0]]
out[0]
out[1]
as.character(out[1])
shiny::runApp('~/GitHub/Badger')
as.factor(0)
shiny::runApp('~/GitHub/Badger')
"white"=="white"
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
shiny::runApp('~/GitHub/Badger')
